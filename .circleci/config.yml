version: 2.1

orbs:
  win: circleci/windows@2.2.0

commands:
  pull_submodules:
    steps:
      - run :
          name: Pull submodules
          command: |
            git submodule init
            git submodule update --remote

  install_build_deps:
    parameters:
      sudo:
        type: boolean
        default: false
      extra:
        type: string
        default: ""
    steps:
      - run:
          name: install cmake gcc python3
          command: |
            <<#parameters.sudo >> sudo <</parameters.sudo >> apt-get update
            <<#parameters.sudo >> sudo <</parameters.sudo >> apt-get install \
            -y cmake g++ python3 python3-pip git << parameters.extra >>
      - run:
          name: install fmtlib
          command: |
            git clone https://github.com/fmtlib/fmt.git
            mkdir fmt/build
            cd fmt/build
            cmake -DFMT_TEST=OFF -DFMT_DOC=OFF ..
            make
            <<#parameters.sudo >> sudo <</parameters.sudo >> make install
      - run:
          name: install layered-file-protocol
          command: |
            git clone https://github.com/equinor/layered-file-protocols.git
            mkdir layered-file-protocols/build
            cd layered-file-protocols/build
            cmake -DBUILD_SHARED_LIBS=ON \
                  -DLFP_FMT_HEADER_ONLY=ON \
                  -DBUILD_TESTING=OFF \
                  -DCMAKE_BUILD_TYPE=Release ..
            make
            <<#parameters.sudo >> sudo <</parameters.sudo >> make install

  python_build:
    parameters:
      docs:
        type: string
        default: ""
    steps:
      - checkout
      - install_build_deps:
          sudo: true
      - pull_submodules
      - run:
          name: install core
          command: |
            mkdir build
            cd build
            cmake -DBUILD_SHARED_LIBS=ON \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DBUILD_TESTING=OFF \
                  -DBUILD_PYTHON=OFF \
                   << parameters.docs >> \
                  ..
            make
            sudo make install
            sudo ldconfig /usr/local/lib
            echo "export mpark_DIR=$PWD/external/mpark" >> $BASH_ENV
      - run:
          name: install python dependencies
          command: python -m pip install --user -r python/requirements-dev.txt
      - run:
          name: build python
          command: |
            cd python
            python setup.py build_ext --inplace install --user test

  cmake_build:
    description: dlisio build steps
    parameters:
      type:
        description: build type
        type: enum
        default: Release
        enum: ["Release", "Debug", "RelWithDebInfo"]
      scan:
        description: scan-build or similar command prefix
        type: string
        default: ""
    steps:
      - run:
          name: install python extra
          command: python3 -m pip install --user -r python/requirements-dev.txt
      - run:
          name: configure
          command: |
            mkdir build
            cd build
            << parameters.scan >> \
            cmake -DBUILD_SHARED_LIBS=ON \
                  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
                  -DCMAKE_BUILD_TYPE=<< parameters.type >> \
                  -DPYTHON_EXECUTABLE=`which python3` \
                  ..
      - run:
          name: build and install
          command: << parameters.scan >> cmake --build build --target install
      - run:
          name: test
          command: |
            cd build
            ctest --output-on-failure

jobs:
  gcc:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps
      - pull_submodules
      - cmake_build

  clang:
    docker:
      - image: debian:stable
    environment:
      CC: /usr/bin/clang
      CXX: /usr/bin/clang++
    steps:
      - checkout
      - install_build_deps:
          extra: clang
      - pull_submodules
      - cmake_build

  debug:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps
      - pull_submodules
      - cmake_build:
          type: Debug

  scan-build:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps:
          extra: clang clang-tools libfindbin-libs-perl
      - pull_submodules
      - cmake_build:
          scan: scan-build --status-bugs

  cppcheck:
    docker:
      - image: ubuntu:latest
    environment:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - install_build_deps:
          extra: cppcheck
      - pull_submodules
      - run:
          name: run cppcheck
          command: |
            cmake . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_TESTING=OFF
            cppcheck --enable=style,portability,performance,warning \
                     --library=posix \
                     --suppressions-list=cppcheck/suppressions.txt \
                     --inline-suppr \
                     --project=compile_commands.json \

  python-35:
    docker:
      - image: circleci/python:3.5
    steps:
      - python_build

  python-36:
    docker:
      - image: circleci/python:3.6
    steps:
      - python_build

  python-37:
    docker:
      - image: circleci/python:3.7
    steps:
      - python_build:
          docs: "-DBUILD_DOC=ON -DSPHINX_ARGS=-WT"

  python-38:
    docker:
      - image: circleci/python:3.8
    steps:
      - python_build:
          docs: "-DBUILD_DOC=ON -DSPHINX_ARGS=-WT"

  windows_build:
    executor:
      name: win/default
      shell: powershell.exe
    parameters:
      python:
        description: python version
        type: string
      platform:
        description: x86 or x64
        type: enum
        enum: ["x86", "x64"]
        # machine is 64-bit, but script attempts not to rely on it by default
    steps:
      - run:
          name: explicitly disable autocrlf
          # CircleCI doesn't disable autocrlf by default, so we need to do it ourselves
          # if not executed, our binary files will be changed
          command: |
            git config --global core.autocrlf false
      - checkout
      - restore_cache:
          key: vers3-cmake
      - run:
          name: install cmake
          command: |
            if (!(Test-Path "C:\Program Files\CMake")){
                choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --no-progress
            } else {
                [Environment]::SetEnvironmentVariable("Path", $env:Path + ";C:\Program Files\CMake\bin",  `
                                                      [EnvironmentVariableTarget]::Machine)
            }
            refreshenv
      - save_cache:
          key: vers3-cmake
          paths:
            - C:\Program Files\CMake
      - restore_cache:
          key: vers1-vcpkg-<< parameters.platform >>
      - run:
          name: install fmt and vcpkg
          command: |
            if (!(Test-Path "C:/Users/circleci/project/vcpkg")){
                git clone https://github.com/Microsoft/vcpkg.git
                cd vcpkg
                .\bootstrap-vcpkg.bat
                .\vcpkg install fmt:<< parameters.platform >>-windows
            }
      - save_cache:
          key: vers1-vcpkg-<< parameters.platform >>
          paths:
            - C:/Users/circleci/project/vcpkg
      - run:
          name: install layered-file-protocol
          command: |
            git clone https://github.com/equinor/layered-file-protocols.git
            mkdir layered-file-protocols/build
            cd layered-file-protocols/build
            if('<< parameters.platform >>' -eq 'x86') {
              $platform = 'Win32'
            } else {
              $platform = 'x64'
            }
            cmake -DCMAKE_CXX_FLAGS="/D_CRT_SECURE_NO_WARNINGS /EHsc" `
                  -DLFP_FMT_HEADER_ONLY=ON `
                  -DBUILD_TESTING=OFF `
                  -DCMAKE_BUILD_TYPE=Release `
                  -A $platform `
                  -DVCPKG_TARGET_TRIPLET=<< parameters.platform >>-windows `
                  -DCMAKE_TOOLCHAIN_FILE=C:/Users/circleci/project/vcpkg/scripts/buildsystems/vcpkg.cmake ..
            cmake --build . --config Release --target install
      - pull_submodules
      - restore_cache:
          key: vers2-conda-<< parameters.python >>-<< parameters.platform >>
      - run:
          name: create python version with miniconda
          command: |
            conda init powershell
            conda env list
            if('<< parameters.platform >>' -eq 'x86') {
              $Env:CONDA_FORCE_32BIT = 1
            }
            conda create -y -n py-<< parameters.python >>-<< parameters.platform >> python=<< parameters.python >>
      - run:
          name: install python dependencies
          command: |
            conda activate py-<< parameters.python >>-<< parameters.platform >>
            python -m pip install --upgrade pip
            python -m pip install --upgrade setuptools
            python -m pip install --user -r python/requirements-dev.txt
      - save_cache:
          key: vers2-conda-<< parameters.python >>-<< parameters.platform >>
          paths:
            - C:\tools\miniconda3
      - run:
          name: install core
          environment:
            lfp_DIR: "C:/Program Files (x86)/layered-file-protocols/share/lfp/cmake"
          command: |
            mkdir build
            cd build
            conda activate py-<< parameters.python >>-<< parameters.platform >>
            $pversion = (python --version | Out-String).trim()
            $pmode = (python -c "import struct;print(struct.calcsize('P') * 8)" | Out-String).trim()
            echo "active python is $pversion ; executing in $pmode -bit mode"
            if('<< parameters.platform >>' -eq 'x86') {
              $platform = 'Win32'
            } else {
              $platform = 'x64'
            }
            cmake -G "Visual Studio 16 2019" `
                  -DCMAKE_CXX_FLAGS="/D_CRT_SECURE_NO_WARNINGS /EHsc" `
                  -DCMAKE_BUILD_TYPE=Release `
                  -A $platform `
                  ..
            cmake --build . --target install --config Release
      - run:
          name: build python
          command: |
            conda activate py-<< parameters.python >>-<< parameters.platform >>
            cd python
            python setup.py bdist_wheel -G "Visual Studio 16 2019"

      - persist_to_workspace:
          root: C:/Users/circleci/project/python
          paths:
            - dist/*

  deploy:
    docker:
      - image: circleci/python:3.7
    # parameters are not used, here only to create correct build-deployment matrix
    parameters:
      python:
        description: python version
        type: string
      platform:
        description: x86 or x64
        type: enum
        enum: ["x86", "x64"]
    steps:
      - run:
          name: install twine
          command: |
             pip install twine
      - attach_workspace:
          at: deploy
      - run:
          name: deploy to repo
          command: |
            cd deploy
            # TWINE_REPOSITORY and TWINE_USERNAME and TWINE_PASSWORD
            # should be defined as CirceCI project environment variables
            #twine upload -r $TWINE_REPOSITORY -u $TWINE_USERNAME -p $TWINE_PASSWORD --skip-existing dist/*
            twine upload --skip-existing dist/*

workflows:
  version: 2
#   build:
#     jobs:
#       - gcc
#       - clang
#       - debug
# 
#   static-analysis:
#     jobs:
#       - cppcheck
#       - scan-build
# 
#   python:
#     jobs:
#       - python-35
#       - python-36
#       - python-37
#       - python-38

  windows:
    jobs:
      - windows_build:
          name: build-python-<< matrix.python >>-win-<< matrix.platform >>
          matrix:
            parameters:
              python: ["3.7"]
              platform: ["x86", "x64"]
          # filters on the "build" jobs are not accidental, CircleCI needs them
          filters:
            tags:
              only: /.*/
      - deploy:
          name: deploy-python-<< matrix.python >>-win-<< matrix.platform >>
          matrix:
            parameters:
              python: ["3.7"]
              platform: ["x86", "x64"]
          requires:
            - build-python-<< matrix.python >>-win-<< matrix.platform >>
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
